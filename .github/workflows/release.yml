name: tfra-release

on:
  release:
    types: [published]
    tags:
      - v*
  push:
    branches:
      - master
      - r*
  pull_request:
    branches:
      - master
      - r*

env:
  MIN_PY_VERSION: '3.7'
  MAX_PY_VERSION: '3.9'
  USE_BAZEL_VERSION: "5.1.1"
  HOROVOD_VERSION: '0.23.0'

jobs:
  test-with-bazel:
    name: Test with bazel
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ env.MIN_PY_VERSION }}
      - name: Build wheels
        run: |
          pip install --default-timeout=1000 -r tools/install_deps/pytest.txt -r tools/install_deps/tensorflow-cpu.txt -r requirements.txt
          sudo apt install -y redis > /dev/null 2> /dev/null
          bash tools/install_deps/install_bazelisk.sh ./
          python -m pip install tensorflow-io
          python -m pip install --upgrade protobuf==3.20.0
          python configure.py
          bazel test --local_ram_resources=4096 -c opt -k --test_timeout 300,450,1200,3600 --test_output=errors //tensorflow_recommenders_addons/...
  release-wheel:
    name: Build release wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: add back 'windows-latest' when it can be compiled.
        os: ['macos-12', 'ubuntu-20.04']
        py-version: ['3.7', '3.8', '3.9']
        tf-version: ['2.6.3', '2.8.3']
        tf-need-cuda: ['1', '0']
        tf-cuda-version: ['11.2']
        tf-cudnn-version: ['8.1']
        cpu: ['x86']
#       TODO(poinwater): add macOS CI once GitHub supports macOS 12.0.0 + 
#        include:
#          - os: 'macos-11'
#            cpu: 'arm64'
#            tf-version: '2.5.0'
#            py-version: '3.9'
#            tf-need-cuda: '0'
        exclude:
          # excludes cuda on macOS
          - os: 'macos-12'
            tf-need-cuda: '1'
      fail-fast: false
    steps:
      - uses: actions/github-script@0.3.0
        id: author-date
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - if: github.event_name == 'push'
        shell: bash
        run: echo "NIGHTLY_FLAG=--nightly" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.py-version }}
      - name: Setup Bazel
        # Ubuntu bazel is run inside of the docker image
        if: matrix.os != 'ubuntu-20.04'
        run: bash tools/install_deps/install_bazelisk.sh ./
      - name: Build wheels
        env:
          OS: ${{ runner.os }}
          PY_VERSION: ${{ matrix.py-version }}
          TF_VERSION: ${{ matrix.tf-version }}
          TF_NEED_CUDA: ${{ matrix.tf-need-cuda }}
          TF_CUDA_VERSION: ${{ matrix.tf-cuda-version }}
          TF_CUDNN_VERSION: ${{ matrix.tf-cudnn-version }}
          NIGHTLY_TIME: ${{ steps.author-date.outputs.result }}
          CPU: ${{ matrix.cpu }}
        shell: bash
        run: bash .github/workflows/make_wheel_${OS}_${CPU}.sh
      - uses: haya14busa/action-cond@v1
        id: device
        with:
          cond: ${{ matrix.tf-need-cuda == '1' }}
          if_true: "gpu"
          if_false: "cpu"
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}-${{ matrix.py-version }}-tf${{ matrix.tf-version }}-${{ steps.device.outputs.value }}-${{ matrix.cpu }}-wheel
          path: wheelhouse
  upload-wheels:
    name: Publish wheels to PyPi
    needs: [release-wheel, test-with-bazel]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # TODO: add back 'Windows' when it can be compiled.
        os: ['macOS', 'Linux']
        py-version: ['3.7', '3.8', '3.9']
        tf-version: ['2.8.3']
        tf-need-cuda: ['1', '0']
        cpu: ['x86']
#       TODO(poinwater): add macOS CI once GitHub supports macOS 12.0.0 + 
#        include:
#          - os: 'macOS'
#            cpu: 'arm64'
#            tf-version: '2.5.0'
#            py-version: '3.9'
#            tf-need-cuda: '0'
        exclude:
          # excludes cuda on macOS
          - os: 'macOS'
            tf-need-cuda: '1'
      fail-fast: false
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'release'
    steps:
      - uses: haya14busa/action-cond@v1
        id: device
        with:
          cond: ${{ matrix.tf-need-cuda == '1' }}
          if_true: "gpu"
          if_false: "cpu"
      - uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.py-version }}-tf${{ matrix.tf-version }}-${{ steps.device.outputs.value }}-${{ matrix.cpu }}-wheel
          path: ./dist
      - run: |
          set -e -x
          ls -la dist/
          sha256sum dist/*.whl
      - uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
  upload-dev-container:
    name: Upload dev container to DockerHub
    needs: [release-wheel, test-with-bazel]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        py-version: ['3.7', '3.8', '3.9']
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v2
      - run: |
          set -e -x
          echo ${{ secrets.DOCKER_PW }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
          export PY_VERSION=${{ matrix.py-version }}
          bash .github/workflows/github_build_dev_container.sh
          docker push tfra/dev_container:latest-python${{ matrix.py-version }}